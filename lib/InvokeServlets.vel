/********************************************************************************/
/*										*/
/*		${invokeclass}.java						*/
/*										*/
/*	Code to instantiate and drive a servlet-based framework for flow	*/
/*	analysis testing							*/
/*										*/
/*	This code is generated by FaitMockCreator.				*/
/*										*/
/********************************************************************************/
// Generated $generate_date


package $package;

import edu.brown.cs.faitmock.servlet.*;
import edu.brown.cs.faitmock.annot.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.Servlet;
import javax.servlet.http.HttpServlet;
import java.util.List;
import java.util.ArrayList;



public class $invokeclass {



/********************************************************************************/
/*										*/
/*	Dummy Main Program							*/
/*										*/
/********************************************************************************/

public static void main(String [] args)
{
   $invokeclass cls = new $invokeclass();
   cls.process();
}



/********************************************************************************/
/*										*/
/*	Private Storage 							*/
/*										*/
/********************************************************************************/

private FaitMockServletContext	servlet_context;
private Servlet 		base_servlet;
#if ($plugins.size() > 0 || $actions.size() > 0 || $controllers.size() > 0)
private org.apache.struts.action.ActionServlet		 action_servlet;
#end



/********************************************************************************/
/*										*/
/*	Constructors								*/
/*										*/
/********************************************************************************/

private $invokeclass()
{
   servlet_context = null;
   base_servlet = null;
#if ($plugins.size() > 0 || $actions.size() > 0 || $controllers.size() > 0)
   action_servlet = null;
   org.apache.struts.tiles.TilesUtil.setTilesUtil(new org.apache.struts.tiles.TilesUtilStrutsImpl());
#end
}



/********************************************************************************/
/*										*/
/*	Processing methods							*/
/*										*/
/********************************************************************************/

private void process()
{
   setup();

   processServlets();
   processTags();
   processPlugins();
   processActions();
   processFilters();
   processControllers();

   if (base_servlet != null) base_servlet = null;
   if (servlet_context != null) servlet_context = null;
#if ($plugins.size() > 0 || $actions.size() > 0 || $controllers.size() > 0)
   if (action_servlet != null) action_servlet = null;
#end
}



/********************************************************************************/
/*										*/
/*	Setup -- basic initialization						*/
/*										*/
/********************************************************************************/

private void setup()
{
   servlet_context = new FaitMockServletContext();
   new FaitMockSession(servlet_context);

#foreach ( $key in $parameters.keySet() )
   servlet_context.setInitParameter("$key","$parameters.get($key)");

#end
#foreach ( $lis in $listeners)
   Object l$foreach.count = new ${lis.listenerClass}();
   if (l$foreach.count instanceof javax.servlet.ServletContextListener) {
      javax.servlet.ServletContextListener scl = (javax.servlet.ServletContextListener) l$foreach.count;
      javax.servlet.ServletContextEvent evt = new javax.servlet.ServletContextEvent(servlet_context);
      scl.contextInitialized(evt);
    }
   if (l$foreach.count instanceof javax.servlet.http.HttpSessionListener) {
      javax.servlet.http.HttpSessionListener hsl = (javax.servlet.http.HttpSessionListener) l$foreach.count;
      javax.servlet.http.HttpSession sess = new FaitMockSession(servlet_context);
      javax.servlet.http.HttpSessionEvent evt = new javax.servlet.http.HttpSessionEvent(sess);
      hsl.sessionCreated(evt);
    }

#end
   javax.servlet.jsp.JspFactory.setDefaultFactory(new FaitMockJspFactory(servlet_context));
}


/********************************************************************************/
/*										*/
/*	Servlet definition							*/
/*										*/
/********************************************************************************/

private void processServlets()
{
#foreach ( $servlet in $servlets )
   setupServlet${servlet.name}();
#end
}



#foreach ( $servlet in $servlets )
private void setupServlet${servlet.name}()
{
   try {
      HttpServletRequest request = new FaitMockServletRequest(servlet_context);
      HttpServletResponse response = new FaitMockServletResponse();
      FaitMockServletConfig config = new FaitMockServletConfig("$servlet.servletClass",servlet_context);
#set ( $values = $servlet.getInitValues() )
#set ( $services = $servlet.getServices() )
#foreach ( $key in $values.keySet() )
      config.setInitParameter("$key","$values.get($key)");
#end
      Servlet s = new ${servlet.servletClass}();
      servlet_context.addFaitServlet("$servlet.name",s);
      s.init(config);
      s.service(request,response);
      if (base_servlet == null) base_servlet = s;
#if ($plugins.size() > 0 || $actions.size() > 0)
      if (action_servlet == null && s instanceof org.apache.struts.action.ActionServlet)
	 action_servlet = (org.apache.struts.action.ActionServlet) s;
#end
    }
   catch (Exception e) { }
}



#end
/********************************************************************************/
/*										*/
/*	Tag processing								*/
/*										*/
/********************************************************************************/

private void processTags()
{
#foreach ( $tag in $tags )
   processTag${tag.name}();
#end
}




#foreach ( $tag in $tags )
private void processTag${tag.name}()
{
   javax.servlet.jsp.JspFactory jspfac = javax.servlet.jsp.JspFactory.getDefaultFactory();
   HttpServletRequest request = new FaitMockServletRequest(servlet_context);
   HttpServletResponse response = new FaitMockServletResponse();

   javax.servlet.jsp.PageContext ctx = jspfac.getPageContext(base_servlet,request,response,
	"dummypage.html",
	true,1024,true);

   try {
      ${tag.tagClass} t = new ${tag.tagClass}();
#set ( $values = $tag.getFields() )
#foreach ( $key in $values.keySet() )
#if ($values.get($key) == 'java.lang.String')
      t.set${key}(dummyString());
#elseif ($values.get($key) == 'java.lang.String[]')
      t.set${key}(dummyStringArray());
#elseif ($values.get($key) == 'java.util.List')
      t.set${key}(dummyList());
#elseif ($values.get($key) == 'int' )
      t.set${key}(dummyInt());
#elseif ($values.get($key) == 'java.lang.Object' )
      t.set${key}(dummyObject("$key"));
#end
#end

      t.setPageContext(ctx);
      t.doStartTag();
      t.doEndTag();
    }
   catch (Exception e) { }
}




#end
/********************************************************************************/
/*										*/
/*	Plugin processing							*/
/*										*/
/********************************************************************************/

private void processPlugins()
{
#foreach ( $plugin in $plugins)
   processPlugin${plugin.name}();
#end
}



#foreach ( $plugin in $plugins )
private void processPlugin${plugin.name}()
{
   createActionServlet();
   org.apache.struts.config.ModuleConfig config =
	 new org.apache.struts.config.impl.ModuleConfigImpl("dummyName");
   try {
      ${plugin.pluginClass} p = new ${plugin.pluginClass}();
#set ( $values = $plugin.getProperties() )
#foreach ( $key in $values.keySet() )
      p.${plugin.getMethodName($key)}("$values.get($key)");
#end
      p.init(action_servlet,config);
    }
   catch (Exception e) { }
}




#end
/********************************************************************************/
/*										*/
/*	Action processing							*/
/*										*/
/********************************************************************************/

private void processActions()
{
#foreach ( $action in $actions)
   processAction${action.name}();
#end
}



#foreach ( $action in $actions )
private void processAction${action.name}()
{
   HttpServletRequest request = new FaitMockServletRequest(servlet_context);
   HttpServletResponse response = new FaitMockServletResponse();
   org.apache.struts.action.ActionMapping map = new org.apache.struts.action.ActionMapping();
   createActionServlet();
   try {
#if ( $action.form )
      ${action.form.formClass} form = createForm${action.form.name}();
#else
      org.apache.struts.action.ActionForm form = new org.apache.struts.validator.ValidatorForm();
#end
      ${action.actionClass} action = new ${action.actionClass}();
      form.setServlet(action_servlet);
      form.validate(map,request);
      action.setServlet(action_servlet);
      action.execute(map,form,request,response);
#foreach ( $rtn in $action.actionRoutines )
      action.${rtn}(map,form,request,response);
#end
    }
   catch (Exception e) { }
}




#end
#foreach ( $form in $forms )
private $form.formClass createForm${form.name}()
{
   $form.formClass form = null;
   try {
      form = new ${form.formClass}();

#set ( $values = $form.getFields() )
#foreach ( $key in $values.keySet() )
#if ($values.get($key) == 'java.lang.String')
      form.set${key}(dummyString());
#elseif ($values.get($key) == 'java.lang.String[]')
      form.set${key}(dummyStringArray());
#elseif ($values.get($key) == 'java.util.List')
      form.set${key}(dummyList());
#elseif ($values.get($key) == 'int' )
      form.set${key}(dummyInt());
#elseif ($values.get($key) == 'java.lang.Object' )
      form.set${key}(dummyObject("$key"));
#end
#end
#set ( $values = $form.getProps() )
#foreach ( $key in $values.keySet() )
#if ($values.get($key) == 'java.lang.String')
      form.set("$key",dummyString());
#elseif ($values.get($key) == 'java.lang.String[]')
      form.set${key}(dummyStringArray());
#elseif ($values.get($key) == 'java.util.List')
      form.set${key}(dummyList());
#elseif ($values.get($key) == 'int' )
      form.set("$key",dummyInt());
#elseif ($values.get($key) == 'java.lang.Object' )
      form.set${key}(dummyObject("$key"));
#end
#end
    }
   catch (Throwable t) { }

   return form;
}



#end
#if ($plugins.size() > 0 || $actions.size() > 0 || $controllers.size() > 0)
private void createActionServlet()
{
   if (action_servlet == null) {
      try {
	 action_servlet = new org.apache.struts.action.ActionServlet();
	 FaitMockServletConfig config = new FaitMockServletConfig(
	    "org.apache.struts.action.ActionServlet", servlet_context);
	 action_servlet.init(config);
       }
      catch (Exception e) { }
    }
}
#end



public @Tainted String dummyString()
{
   return "VAL_" + Math.random();
}


public int dummyInt()
{
   return (int) (Math.random()*1024);
}



public @Tainted String [] dummyStringArray()
{
   String [] rslt = new String[1];
   rslt[0] = dummyString();
   return rslt;
}



public @Tainted List<?> dummyList()
{
   List<String> ls = new ArrayList<>();
   ls.add(dummyString());
   ls.add(dummyString());
   return ls;
}



public @Tainted Object dummyObject(String fld)
{
   if (fld.endsWith("s")) {
      List<String> ls = new ArrayList<>();
      ls.add(dummyString());
      ls.add(dummyString());
      return ls;
    }
   else {
      return dummyString();
    }
}



/********************************************************************************/
/*										*/
/*	Filter processing							*/
/*										*/
/********************************************************************************/

private void processFilters()
{
#foreach ( $filter in $filters)
   processFilter${filter.name}();
#end
}



#foreach ( $filter in $filters )
private void processFilter${filter.name}()
{
   HttpServletRequest request = new FaitMockServletRequest(servlet_context);
   HttpServletResponse response = new FaitMockServletResponse();
   javax.servlet.FilterChain chain = new javax.servlet.FilterChain() {
      public void doFilter(javax.servlet.ServletRequest req,javax.servlet.ServletResponse resp) { }
    };

   try {
      FaitMockFilterConfig config = new FaitMockFilterConfig("$filter.name",servlet_context);
#set ( $values = $filter.getInitValues() )
#foreach ( $key in $values.keySet() )
      config.setInitParameter("$key","$values.get($key)");
#end
      ${filter.filterClass} filter = new ${filter.filterClass}();
      filter.init(config);
      filter.doFilter(request,response,chain);
    }
   catch (Exception e) { }
}




#end
/********************************************************************************/
/*										*/
/*	Controller processing							*/
/*										*/
/********************************************************************************/

private void processControllers()
{
#foreach ( $ctrl in $controllers )
   processController${ctrl.name}();
#end
}




#foreach ( $ctrl in $controllers )
private void processController${ctrl.name}()
{
   createActionServlet();
   org.apache.struts.config.ModuleConfig config =
	 new org.apache.struts.config.impl.ModuleConfigImpl("dummyName");
   HttpServletRequest request = new FaitMockServletRequest(servlet_context);
   HttpServletResponse response = new FaitMockServletResponse();

   try {
      ${ctrl.controllerClass} ctrl = new ${ctrl.controllerClass}();
      ctrl.init(action_servlet,config);
      ctrl.process(request,response);
    }
   catch (Exception e) { }
}




#end
}	// end of ${invokeclass}



/* end of ${invokeclass}.java */
